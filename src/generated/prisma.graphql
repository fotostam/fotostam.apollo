# source: http://localhost:4466
# timestamp: Sat May 11 2019 21:52:49 GMT+0200 (Central European Summer Time)

type AggregateOrder {
  count: Int!
}

type AggregatePhoto {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createOrder(data: OrderCreateInput!): Order!
  createPhoto(data: PhotoCreateInput!): Photo!
  updateOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order
  updatePhoto(data: PhotoUpdateInput!, where: PhotoWhereUniqueInput!): Photo
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deletePhoto(where: PhotoWhereUniqueInput!): Photo
  upsertOrder(where: OrderWhereUniqueInput!, create: OrderCreateInput!, update: OrderUpdateInput!): Order!
  upsertPhoto(where: PhotoWhereUniqueInput!, create: PhotoCreateInput!, update: PhotoUpdateInput!): Photo!
  updateManyOrders(data: OrderUpdateManyMutationInput!, where: OrderWhereInput): BatchPayload!
  updateManyPhotos(data: PhotoUpdateManyMutationInput!, where: PhotoWhereInput): BatchPayload!
  deleteManyOrders(where: OrderWhereInput): BatchPayload!
  deleteManyPhotos(where: PhotoWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Order implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  group: String
  status: Status
  error: String
  photos(where: PhotoWhereInput, orderBy: PhotoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Photo!]
}

"""A connection to a list of items."""
type OrderConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OrderEdge]!
  aggregate: AggregateOrder!
}

input OrderCreateInput {
  id: ID
  name: String
  group: String
  status: Status
  error: String
  photos: PhotoCreateManyWithoutOrderInput
}

input OrderCreateOneWithoutPhotosInput {
  create: OrderCreateWithoutPhotosInput
  connect: OrderWhereUniqueInput
}

input OrderCreateWithoutPhotosInput {
  id: ID
  name: String
  group: String
  status: Status
  error: String
}

"""An edge in a connection."""
type OrderEdge {
  """The item at the end of the edge."""
  node: Order!

  """A cursor for use in pagination."""
  cursor: String!
}

enum OrderOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  group_ASC
  group_DESC
  status_ASC
  status_DESC
  error_ASC
  error_DESC
}

type OrderPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  group: String
  status: Status
  error: String
}

type OrderSubscriptionPayload {
  mutation: MutationType!
  node: Order
  updatedFields: [String!]
  previousValues: OrderPreviousValues
}

input OrderSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [OrderSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrderSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrderSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OrderWhereInput
}

input OrderUpdateInput {
  name: String
  group: String
  status: Status
  error: String
  photos: PhotoUpdateManyWithoutOrderInput
}

input OrderUpdateManyMutationInput {
  name: String
  group: String
  status: Status
  error: String
}

input OrderUpdateOneRequiredWithoutPhotosInput {
  create: OrderCreateWithoutPhotosInput
  connect: OrderWhereUniqueInput
  update: OrderUpdateWithoutPhotosDataInput
  upsert: OrderUpsertWithoutPhotosInput
}

input OrderUpdateWithoutPhotosDataInput {
  name: String
  group: String
  status: Status
  error: String
}

input OrderUpsertWithoutPhotosInput {
  update: OrderUpdateWithoutPhotosDataInput!
  create: OrderCreateWithoutPhotosInput!
}

input OrderWhereInput {
  """Logical AND on all given filters."""
  AND: [OrderWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrderWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrderWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  group: String

  """All values that are not equal to given value."""
  group_not: String

  """All values that are contained in given list."""
  group_in: [String!]

  """All values that are not contained in given list."""
  group_not_in: [String!]

  """All values less than the given value."""
  group_lt: String

  """All values less than or equal the given value."""
  group_lte: String

  """All values greater than the given value."""
  group_gt: String

  """All values greater than or equal the given value."""
  group_gte: String

  """All values containing the given string."""
  group_contains: String

  """All values not containing the given string."""
  group_not_contains: String

  """All values starting with the given string."""
  group_starts_with: String

  """All values not starting with the given string."""
  group_not_starts_with: String

  """All values ending with the given string."""
  group_ends_with: String

  """All values not ending with the given string."""
  group_not_ends_with: String
  status: Status

  """All values that are not equal to given value."""
  status_not: Status

  """All values that are contained in given list."""
  status_in: [Status!]

  """All values that are not contained in given list."""
  status_not_in: [Status!]
  error: String

  """All values that are not equal to given value."""
  error_not: String

  """All values that are contained in given list."""
  error_in: [String!]

  """All values that are not contained in given list."""
  error_not_in: [String!]

  """All values less than the given value."""
  error_lt: String

  """All values less than or equal the given value."""
  error_lte: String

  """All values greater than the given value."""
  error_gt: String

  """All values greater than or equal the given value."""
  error_gte: String

  """All values containing the given string."""
  error_contains: String

  """All values not containing the given string."""
  error_not_contains: String

  """All values starting with the given string."""
  error_starts_with: String

  """All values not starting with the given string."""
  error_not_starts_with: String

  """All values ending with the given string."""
  error_ends_with: String

  """All values not ending with the given string."""
  error_not_ends_with: String
  photos_every: PhotoWhereInput
  photos_some: PhotoWhereInput
  photos_none: PhotoWhereInput
}

input OrderWhereUniqueInput {
  id: ID
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Photo implements Node {
  id: ID!
  tag: String!
  amount: Int!
  status: PhotoStatus!
  error: String
  url: String
  order: Order!
}

"""A connection to a list of items."""
type PhotoConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PhotoEdge]!
  aggregate: AggregatePhoto!
}

input PhotoCreateInput {
  id: ID
  tag: String!
  amount: Int!
  status: PhotoStatus!
  error: String
  url: String
  order: OrderCreateOneWithoutPhotosInput!
}

input PhotoCreateManyWithoutOrderInput {
  create: [PhotoCreateWithoutOrderInput!]
  connect: [PhotoWhereUniqueInput!]
}

input PhotoCreateWithoutOrderInput {
  id: ID
  tag: String!
  amount: Int!
  status: PhotoStatus!
  error: String
  url: String
}

"""An edge in a connection."""
type PhotoEdge {
  """The item at the end of the edge."""
  node: Photo!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PhotoOrderByInput {
  id_ASC
  id_DESC
  tag_ASC
  tag_DESC
  amount_ASC
  amount_DESC
  status_ASC
  status_DESC
  error_ASC
  error_DESC
  url_ASC
  url_DESC
}

type PhotoPreviousValues {
  id: ID!
  tag: String!
  amount: Int!
  status: PhotoStatus!
  error: String
  url: String
}

input PhotoScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [PhotoScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [PhotoScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PhotoScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  tag: String

  """All values that are not equal to given value."""
  tag_not: String

  """All values that are contained in given list."""
  tag_in: [String!]

  """All values that are not contained in given list."""
  tag_not_in: [String!]

  """All values less than the given value."""
  tag_lt: String

  """All values less than or equal the given value."""
  tag_lte: String

  """All values greater than the given value."""
  tag_gt: String

  """All values greater than or equal the given value."""
  tag_gte: String

  """All values containing the given string."""
  tag_contains: String

  """All values not containing the given string."""
  tag_not_contains: String

  """All values starting with the given string."""
  tag_starts_with: String

  """All values not starting with the given string."""
  tag_not_starts_with: String

  """All values ending with the given string."""
  tag_ends_with: String

  """All values not ending with the given string."""
  tag_not_ends_with: String
  amount: Int

  """All values that are not equal to given value."""
  amount_not: Int

  """All values that are contained in given list."""
  amount_in: [Int!]

  """All values that are not contained in given list."""
  amount_not_in: [Int!]

  """All values less than the given value."""
  amount_lt: Int

  """All values less than or equal the given value."""
  amount_lte: Int

  """All values greater than the given value."""
  amount_gt: Int

  """All values greater than or equal the given value."""
  amount_gte: Int
  status: PhotoStatus

  """All values that are not equal to given value."""
  status_not: PhotoStatus

  """All values that are contained in given list."""
  status_in: [PhotoStatus!]

  """All values that are not contained in given list."""
  status_not_in: [PhotoStatus!]
  error: String

  """All values that are not equal to given value."""
  error_not: String

  """All values that are contained in given list."""
  error_in: [String!]

  """All values that are not contained in given list."""
  error_not_in: [String!]

  """All values less than the given value."""
  error_lt: String

  """All values less than or equal the given value."""
  error_lte: String

  """All values greater than the given value."""
  error_gt: String

  """All values greater than or equal the given value."""
  error_gte: String

  """All values containing the given string."""
  error_contains: String

  """All values not containing the given string."""
  error_not_contains: String

  """All values starting with the given string."""
  error_starts_with: String

  """All values not starting with the given string."""
  error_not_starts_with: String

  """All values ending with the given string."""
  error_ends_with: String

  """All values not ending with the given string."""
  error_not_ends_with: String
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
}

enum PhotoStatus {
  HEALTHY
  ERROR
}

type PhotoSubscriptionPayload {
  mutation: MutationType!
  node: Photo
  updatedFields: [String!]
  previousValues: PhotoPreviousValues
}

input PhotoSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PhotoSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PhotoSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PhotoSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PhotoWhereInput
}

input PhotoUpdateInput {
  tag: String
  amount: Int
  status: PhotoStatus
  error: String
  url: String
  order: OrderUpdateOneRequiredWithoutPhotosInput
}

input PhotoUpdateManyDataInput {
  tag: String
  amount: Int
  status: PhotoStatus
  error: String
  url: String
}

input PhotoUpdateManyMutationInput {
  tag: String
  amount: Int
  status: PhotoStatus
  error: String
  url: String
}

input PhotoUpdateManyWithoutOrderInput {
  create: [PhotoCreateWithoutOrderInput!]
  connect: [PhotoWhereUniqueInput!]
  set: [PhotoWhereUniqueInput!]
  disconnect: [PhotoWhereUniqueInput!]
  delete: [PhotoWhereUniqueInput!]
  update: [PhotoUpdateWithWhereUniqueWithoutOrderInput!]
  updateMany: [PhotoUpdateManyWithWhereNestedInput!]
  deleteMany: [PhotoScalarWhereInput!]
  upsert: [PhotoUpsertWithWhereUniqueWithoutOrderInput!]
}

input PhotoUpdateManyWithWhereNestedInput {
  where: PhotoScalarWhereInput!
  data: PhotoUpdateManyDataInput!
}

input PhotoUpdateWithoutOrderDataInput {
  tag: String
  amount: Int
  status: PhotoStatus
  error: String
  url: String
}

input PhotoUpdateWithWhereUniqueWithoutOrderInput {
  where: PhotoWhereUniqueInput!
  data: PhotoUpdateWithoutOrderDataInput!
}

input PhotoUpsertWithWhereUniqueWithoutOrderInput {
  where: PhotoWhereUniqueInput!
  update: PhotoUpdateWithoutOrderDataInput!
  create: PhotoCreateWithoutOrderInput!
}

input PhotoWhereInput {
  """Logical AND on all given filters."""
  AND: [PhotoWhereInput!]

  """Logical OR on all given filters."""
  OR: [PhotoWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PhotoWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  tag: String

  """All values that are not equal to given value."""
  tag_not: String

  """All values that are contained in given list."""
  tag_in: [String!]

  """All values that are not contained in given list."""
  tag_not_in: [String!]

  """All values less than the given value."""
  tag_lt: String

  """All values less than or equal the given value."""
  tag_lte: String

  """All values greater than the given value."""
  tag_gt: String

  """All values greater than or equal the given value."""
  tag_gte: String

  """All values containing the given string."""
  tag_contains: String

  """All values not containing the given string."""
  tag_not_contains: String

  """All values starting with the given string."""
  tag_starts_with: String

  """All values not starting with the given string."""
  tag_not_starts_with: String

  """All values ending with the given string."""
  tag_ends_with: String

  """All values not ending with the given string."""
  tag_not_ends_with: String
  amount: Int

  """All values that are not equal to given value."""
  amount_not: Int

  """All values that are contained in given list."""
  amount_in: [Int!]

  """All values that are not contained in given list."""
  amount_not_in: [Int!]

  """All values less than the given value."""
  amount_lt: Int

  """All values less than or equal the given value."""
  amount_lte: Int

  """All values greater than the given value."""
  amount_gt: Int

  """All values greater than or equal the given value."""
  amount_gte: Int
  status: PhotoStatus

  """All values that are not equal to given value."""
  status_not: PhotoStatus

  """All values that are contained in given list."""
  status_in: [PhotoStatus!]

  """All values that are not contained in given list."""
  status_not_in: [PhotoStatus!]
  error: String

  """All values that are not equal to given value."""
  error_not: String

  """All values that are contained in given list."""
  error_in: [String!]

  """All values that are not contained in given list."""
  error_not_in: [String!]

  """All values less than the given value."""
  error_lt: String

  """All values less than or equal the given value."""
  error_lte: String

  """All values greater than the given value."""
  error_gt: String

  """All values greater than or equal the given value."""
  error_gte: String

  """All values containing the given string."""
  error_contains: String

  """All values not containing the given string."""
  error_not_contains: String

  """All values starting with the given string."""
  error_starts_with: String

  """All values not starting with the given string."""
  error_not_starts_with: String

  """All values ending with the given string."""
  error_ends_with: String

  """All values not ending with the given string."""
  error_not_ends_with: String
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
  order: OrderWhereInput
}

input PhotoWhereUniqueInput {
  id: ID
}

type Query {
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order]!
  photos(where: PhotoWhereInput, orderBy: PhotoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Photo]!
  order(where: OrderWhereUniqueInput!): Order
  photo(where: PhotoWhereUniqueInput!): Photo
  ordersConnection(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderConnection!
  photosConnection(where: PhotoWhereInput, orderBy: PhotoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PhotoConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

enum Status {
  ON_HOLD
  IN_PRODUCTION
  ERROR
  DONE
}

type Subscription {
  order(where: OrderSubscriptionWhereInput): OrderSubscriptionPayload
  photo(where: PhotoSubscriptionWhereInput): PhotoSubscriptionPayload
}
